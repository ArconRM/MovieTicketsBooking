// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MovieDataService.Repository;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MovieDataService.Migrations
{
    [DbContext(typeof(MovieDataContext))]
    [Migration("20250427081752_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ActorMovie", b =>
                {
                    b.Property<Guid>("ActorsUUID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MoviesUUID")
                        .HasColumnType("uuid");

                    b.HasKey("ActorsUUID", "MoviesUUID");

                    b.HasIndex("MoviesUUID");

                    b.ToTable("ActorMovie");
                });

            modelBuilder.Entity("GenreMovie", b =>
                {
                    b.Property<Guid>("GenresUUID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MoviesUUID")
                        .HasColumnType("uuid");

                    b.HasKey("GenresUUID", "MoviesUUID");

                    b.HasIndex("MoviesUUID");

                    b.ToTable("GenreMovie");
                });

            modelBuilder.Entity("MovieDataService.Entities.Actor", b =>
                {
                    b.Property<Guid>("UUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AvatarUUID")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Nationality")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("UUID");

                    b.ToTable("Actors");
                });

            modelBuilder.Entity("MovieDataService.Entities.Genre", b =>
                {
                    b.Property<Guid>("UUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("UUID");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("MovieDataService.Entities.Movie", b =>
                {
                    b.Property<Guid>("UUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<Guid>("ProducerId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProducerUUID")
                        .HasColumnType("uuid");

                    b.Property<double?>("Rating")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("UUID");

                    b.HasIndex("ProducerId");

                    b.HasIndex("ProducerUUID");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("MovieDataService.Entities.Producer", b =>
                {
                    b.Property<Guid>("UUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AvatarUUID")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Nationality")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("UUID");

                    b.ToTable("Producers");
                });

            modelBuilder.Entity("ActorMovie", b =>
                {
                    b.HasOne("MovieDataService.Entities.Actor", null)
                        .WithMany()
                        .HasForeignKey("ActorsUUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieDataService.Entities.Movie", null)
                        .WithMany()
                        .HasForeignKey("MoviesUUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GenreMovie", b =>
                {
                    b.HasOne("MovieDataService.Entities.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresUUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieDataService.Entities.Movie", null)
                        .WithMany()
                        .HasForeignKey("MoviesUUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MovieDataService.Entities.Movie", b =>
                {
                    b.HasOne("MovieDataService.Entities.Producer", "Producer")
                        .WithMany()
                        .HasForeignKey("ProducerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieDataService.Entities.Producer", null)
                        .WithMany("Movies")
                        .HasForeignKey("ProducerUUID");

                    b.Navigation("Producer");
                });

            modelBuilder.Entity("MovieDataService.Entities.Producer", b =>
                {
                    b.Navigation("Movies");
                });
#pragma warning restore 612, 618
        }
    }
}
