// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MovieTicketsService.Repository;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MovieTicketsService.Migrations
{
    [DbContext(typeof(MovieTicketsContext))]
    [Migration("20250516181753_FixingLogic")]
    partial class FixingLogic
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MovieTicketsService.Entities.Booking", b =>
                {
                    b.Property<Guid>("UUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("MovieShowUUID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SeatUUID")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<Guid>("UserUUID")
                        .HasColumnType("uuid");

                    b.HasKey("UUID");

                    b.HasIndex("MovieShowUUID");

                    b.HasIndex("SeatUUID");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("MovieTicketsService.Entities.MovieShow", b =>
                {
                    b.Property<Guid>("UUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("MovieUUID")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<Guid>("ScreeningRoomUUID")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UUID");

                    b.HasIndex("ScreeningRoomUUID");

                    b.ToTable("MovieShows");
                });

            modelBuilder.Entity("MovieTicketsService.Entities.ScreeningRoom", b =>
                {
                    b.Property<Guid>("UUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Capacity")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("TheaterUUID")
                        .HasColumnType("uuid");

                    b.HasKey("UUID");

                    b.HasIndex("TheaterUUID");

                    b.ToTable("ScreeningRooms");
                });

            modelBuilder.Entity("MovieTicketsService.Entities.Seat", b =>
                {
                    b.Property<Guid>("UUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("RowNumber")
                        .HasColumnType("integer");

                    b.Property<Guid>("ScreeningRoomUUID")
                        .HasColumnType("uuid");

                    b.Property<int>("SeatNumber")
                        .HasColumnType("integer");

                    b.HasKey("UUID");

                    b.HasIndex("ScreeningRoomUUID");

                    b.ToTable("Seats");
                });

            modelBuilder.Entity("MovieTicketsService.Entities.Theater", b =>
                {
                    b.Property<Guid>("UUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ContactInfo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("UUID");

                    b.ToTable("Theaters");
                });

            modelBuilder.Entity("MovieTicketsService.Entities.Booking", b =>
                {
                    b.HasOne("MovieTicketsService.Entities.MovieShow", "MovieShow")
                        .WithMany("Bookings")
                        .HasForeignKey("MovieShowUUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieTicketsService.Entities.Seat", "Seat")
                        .WithMany("Bookings")
                        .HasForeignKey("SeatUUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MovieShow");

                    b.Navigation("Seat");
                });

            modelBuilder.Entity("MovieTicketsService.Entities.MovieShow", b =>
                {
                    b.HasOne("MovieTicketsService.Entities.ScreeningRoom", "ScreeningRoom")
                        .WithMany("MovieShows")
                        .HasForeignKey("ScreeningRoomUUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ScreeningRoom");
                });

            modelBuilder.Entity("MovieTicketsService.Entities.ScreeningRoom", b =>
                {
                    b.HasOne("MovieTicketsService.Entities.Theater", "Theater")
                        .WithMany("ScreeningRooms")
                        .HasForeignKey("TheaterUUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Theater");
                });

            modelBuilder.Entity("MovieTicketsService.Entities.Seat", b =>
                {
                    b.HasOne("MovieTicketsService.Entities.ScreeningRoom", "ScreeningRoom")
                        .WithMany("Seats")
                        .HasForeignKey("ScreeningRoomUUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ScreeningRoom");
                });

            modelBuilder.Entity("MovieTicketsService.Entities.MovieShow", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("MovieTicketsService.Entities.ScreeningRoom", b =>
                {
                    b.Navigation("MovieShows");

                    b.Navigation("Seats");
                });

            modelBuilder.Entity("MovieTicketsService.Entities.Seat", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("MovieTicketsService.Entities.Theater", b =>
                {
                    b.Navigation("ScreeningRooms");
                });
#pragma warning restore 612, 618
        }
    }
}
